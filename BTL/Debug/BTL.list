
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003794  08003794  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003794  08003794  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003794  08003794  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800379c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000038  080037d4  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080037d4  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aca2  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d03  00000000  00000000  0002ad03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002ca08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018986  00000000  00000000  0002e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb0d  00000000  00000000  00046d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a90a  00000000  00000000  0005581b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  000e0178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08003754 	.word	0x08003754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08003754 	.word	0x08003754

0800014c <setGreenLed1>:
#define LED1_EN0_Pin       L1_EN0_Pin
#define LED1_EN1_GPIO_Port L1_EN1_GPIO_Port
#define LED1_EN1_Pin       L1_EN1_Pin
#endif

void setGreenLed1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <setGreenLed1+0x20>)
 8000158:	f001 fe63 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2108      	movs	r1, #8
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <setGreenLed1+0x24>)
 8000162:	f001 fe5e 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010800 	.word	0x40010800
 8000170:	40010c00 	.word	0x40010c00

08000174 <setYellowLed1>:

void setYellowLed1(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
#else
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2108      	movs	r1, #8
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <setYellowLed1+0x20>)
 800017e:	f001 fe50 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, SET);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <setYellowLed1+0x24>)
 800018a:	f001 fe4a 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010c00 	.word	0x40010c00
 8000198:	40010800 	.word	0x40010800

0800019c <setRedLed1>:

void setRedLed1(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <setRedLed1+0x20>)
 80001a6:	f001 fe3c 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, SET);
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <setRedLed1+0x24>)
 80001b2:	f001 fe36 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	40010800 	.word	0x40010800

080001c4 <setGreenLed2>:

void setGreenLed2(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2120      	movs	r1, #32
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <setGreenLed2+0x1c>)
 80001ce:	f001 fe28 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2110      	movs	r1, #16
 80001d6:	4802      	ldr	r0, [pc, #8]	; (80001e0 <setGreenLed2+0x1c>)
 80001d8:	f001 fe23 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <setYellowLed2>:

void setYellowLed2(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
#else
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <setYellowLed2+0x1c>)
 80001ee:	f001 fe18 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2120      	movs	r1, #32
 80001f6:	4802      	ldr	r0, [pc, #8]	; (8000200 <setYellowLed2+0x1c>)
 80001f8:	f001 fe13 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010c00 	.word	0x40010c00

08000204 <setRedLed2>:

void setRedLed2(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2110      	movs	r1, #16
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <setRedLed2+0x1c>)
 800020e:	f001 fe08 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2120      	movs	r1, #32
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <setRedLed2+0x1c>)
 8000218:	f001 fe03 	bl	8001e22 <HAL_GPIO_WritePin>
#endif
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010c00 	.word	0x40010c00

08000224 <clearAllLed>:

void clearAllLed(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2108      	movs	r1, #8
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <clearAllLed+0x34>)
 800022e:	f001 fdf8 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000238:	4808      	ldr	r0, [pc, #32]	; (800025c <clearAllLed+0x38>)
 800023a:	f001 fdf2 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2110      	movs	r1, #16
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <clearAllLed+0x34>)
 8000244:	f001 fded 	bl	8001e22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2120      	movs	r1, #32
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <clearAllLed+0x34>)
 800024e:	f001 fde8 	bl	8001e22 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <toggleRed1>:

void toggleRed1(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if(state == 1){
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <toggleRed1+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d105      	bne.n	8000278 <toggleRed1+0x18>
		setRedLed1();
 800026c:	f7ff ff96 	bl	800019c <setRedLed1>
		state = 0;
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <toggleRed1+0x20>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
		return;
 8000276:	e002      	b.n	800027e <toggleRed1+0x1e>
	}
	state = 1;
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <toggleRed1+0x20>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000064 	.word	0x20000064

08000284 <toggleYellow1>:
void toggleYellow1(){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	if(state == 1){
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <toggleYellow1+0x20>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d105      	bne.n	800029c <toggleYellow1+0x18>
		setYellowLed1();
 8000290:	f7ff ff70 	bl	8000174 <setYellowLed1>
		state = 0;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <toggleYellow1+0x20>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
		return;
 800029a:	e002      	b.n	80002a2 <toggleYellow1+0x1e>
	}
	state = 1;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <toggleYellow1+0x20>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000064 	.word	0x20000064

080002a8 <toggleGreen1>:
void toggleGreen1(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	if(state == 1){
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <toggleGreen1+0x20>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d105      	bne.n	80002c0 <toggleGreen1+0x18>
		setGreenLed1();
 80002b4:	f7ff ff4a 	bl	800014c <setGreenLed1>
		state = 0;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <toggleGreen1+0x20>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
		return;
 80002be:	e002      	b.n	80002c6 <toggleGreen1+0x1e>
	}
	state = 1;
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <toggleGreen1+0x20>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000064 	.word	0x20000064

080002cc <toggleRed2>:

void toggleRed2(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(state2 == 1){
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <toggleRed2+0x20>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d105      	bne.n	80002e4 <toggleRed2+0x18>
		setRedLed2();
 80002d8:	f7ff ff94 	bl	8000204 <setRedLed2>
		state2 = 0;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <toggleRed2+0x20>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
		return;
 80002e2:	e002      	b.n	80002ea <toggleRed2+0x1e>
	}
	state2 = 1;
 80002e4:	4b01      	ldr	r3, [pc, #4]	; (80002ec <toggleRed2+0x20>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000068 	.word	0x20000068

080002f0 <toggleYellow2>:
void toggleYellow2(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if(state2 == 1){
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <toggleYellow2+0x20>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d105      	bne.n	8000308 <toggleYellow2+0x18>
		setYellowLed2();
 80002fc:	f7ff ff72 	bl	80001e4 <setYellowLed2>
		state2 = 0;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <toggleYellow2+0x20>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		return;
 8000306:	e002      	b.n	800030e <toggleYellow2+0x1e>
	}
	state2 = 1;
 8000308:	4b01      	ldr	r3, [pc, #4]	; (8000310 <toggleYellow2+0x20>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000068 	.word	0x20000068

08000314 <toggleGreen2>:
void toggleGreen2(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	if(state2 == 1){
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <toggleGreen2+0x20>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d105      	bne.n	800032c <toggleGreen2+0x18>
		setGreenLed2();
 8000320:	f7ff ff50 	bl	80001c4 <setGreenLed2>
		state2 = 0;
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <toggleGreen2+0x20>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		return;
 800032a:	e002      	b.n	8000332 <toggleGreen2+0x1e>
	}
	state2 = 1;
 800032c:	4b01      	ldr	r3, [pc, #4]	; (8000334 <toggleGreen2+0x20>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000068 	.word	0x20000068

08000338 <fsm1_automatic_run>:
 *      Author: PC
 */

#include "fsm_automatic.h"

void fsm1_automatic_run() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	switch (status1) {
 800033c:	4b93      	ldr	r3, [pc, #588]	; (800058c <fsm1_automatic_run+0x254>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	2b11      	cmp	r3, #17
 8000344:	f200 8117 	bhi.w	8000576 <fsm1_automatic_run+0x23e>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <fsm1_automatic_run+0x18>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000399 	.word	0x08000399
 8000354:	080003b5 	.word	0x080003b5
 8000358:	080004d3 	.word	0x080004d3
 800035c:	08000445 	.word	0x08000445
 8000360:	08000577 	.word	0x08000577
 8000364:	08000577 	.word	0x08000577
 8000368:	08000577 	.word	0x08000577
 800036c:	08000577 	.word	0x08000577
 8000370:	08000577 	.word	0x08000577
 8000374:	08000577 	.word	0x08000577
 8000378:	08000577 	.word	0x08000577
 800037c:	08000577 	.word	0x08000577
 8000380:	08000577 	.word	0x08000577
 8000384:	08000577 	.word	0x08000577
 8000388:	08000577 	.word	0x08000577
 800038c:	08000577 	.word	0x08000577
 8000390:	08000577 	.word	0x08000577
 8000394:	08000561 	.word	0x08000561
	case INIT:
		//TODO
		setRedLed1();
 8000398:	f7ff ff00 	bl	800019c <setRedLed1>
		status1 = AUTO_RED;
 800039c:	4b7b      	ldr	r3, [pc, #492]	; (800058c <fsm1_automatic_run+0x254>)
 800039e:	2202      	movs	r2, #2
 80003a0:	601a      	str	r2, [r3, #0]
		setTimer1(red_duration1);
 80003a2:	4b7b      	ldr	r3, [pc, #492]	; (8000590 <fsm1_automatic_run+0x258>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 f8d6 	bl	8001558 <setTimer1>
		setTimer3(100);
 80003ac:	2064      	movs	r0, #100	; 0x64
 80003ae:	f001 f8fb 	bl	80015a8 <setTimer3>
		break;
 80003b2:	e0e9      	b.n	8000588 <fsm1_automatic_run+0x250>

	case AUTO_RED:
		//TODO
		setRedLed1();
 80003b4:	f7ff fef2 	bl	800019c <setRedLed1>
		if (isTimer3Expired()) {
 80003b8:	f001 f9f0 	bl	800179c <isTimer3Expired>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d007      	beq.n	80003d2 <fsm1_automatic_run+0x9a>
			setTimer3(100);
 80003c2:	2064      	movs	r0, #100	; 0x64
 80003c4:	f001 f8f0 	bl	80015a8 <setTimer3>
			timeCountdown1--;
 80003c8:	4b72      	ldr	r3, [pc, #456]	; (8000594 <fsm1_automatic_run+0x25c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	4a71      	ldr	r2, [pc, #452]	; (8000594 <fsm1_automatic_run+0x25c>)
 80003d0:	6013      	str	r3, [r2, #0]
		}
		if (isTimer1Expired() == 1) {
 80003d2:	f001 f9bf 	bl	8001754 <isTimer1Expired>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d114      	bne.n	8000406 <fsm1_automatic_run+0xce>
			setTimer1(green_duration1);
 80003dc:	4b6e      	ldr	r3, [pc, #440]	; (8000598 <fsm1_automatic_run+0x260>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 f8b9 	bl	8001558 <setTimer1>
			status1 = AUTO_GREEN;
 80003e6:	4b69      	ldr	r3, [pc, #420]	; (800058c <fsm1_automatic_run+0x254>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 80003ec:	2064      	movs	r0, #100	; 0x64
 80003ee:	f001 f8db 	bl	80015a8 <setTimer3>
			timeCountdown1 = green_duration1 / 100;
 80003f2:	4b69      	ldr	r3, [pc, #420]	; (8000598 <fsm1_automatic_run+0x260>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a69      	ldr	r2, [pc, #420]	; (800059c <fsm1_automatic_run+0x264>)
 80003f8:	fb82 1203 	smull	r1, r2, r2, r3
 80003fc:	1152      	asrs	r2, r2, #5
 80003fe:	17db      	asrs	r3, r3, #31
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	4a64      	ldr	r2, [pc, #400]	; (8000594 <fsm1_automatic_run+0x25c>)
 8000404:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(0)) {
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fd72 	bl	8000ef0 <isButtonPressed>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	f000 80b3 	beq.w	800057a <fsm1_automatic_run+0x242>
			clearAllLed();
 8000414:	f7ff ff06 	bl	8000224 <clearAllLed>
			status1 = WAIT;
 8000418:	4b5c      	ldr	r3, [pc, #368]	; (800058c <fsm1_automatic_run+0x254>)
 800041a:	2212      	movs	r2, #18
 800041c:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 800041e:	4b60      	ldr	r3, [pc, #384]	; (80005a0 <fsm1_automatic_run+0x268>)
 8000420:	2212      	movs	r2, #18
 8000422:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 8000424:	4b5f      	ldr	r3, [pc, #380]	; (80005a4 <fsm1_automatic_run+0x26c>)
 8000426:	220c      	movs	r2, #12
 8000428:	601a      	str	r2, [r3, #0]
			clearTimer1();
 800042a:	f001 f8d1 	bl	80015d0 <clearTimer1>
			clearTimer2();
 800042e:	f001 f8df 	bl	80015f0 <clearTimer2>
			clearTimer3();
 8000432:	f001 f8ed 	bl	8001610 <clearTimer3>
			setTimer1(100);
 8000436:	2064      	movs	r0, #100	; 0x64
 8000438:	f001 f88e 	bl	8001558 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 800043c:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <fsm1_automatic_run+0x270>)
 800043e:	2215      	movs	r2, #21
 8000440:	601a      	str	r2, [r3, #0]
		}
		break;
 8000442:	e09a      	b.n	800057a <fsm1_automatic_run+0x242>

	case AUTO_GREEN:
		//TODO
		setGreenLed1();
 8000444:	f7ff fe82 	bl	800014c <setGreenLed1>
		if (isTimer3Expired()) {
 8000448:	f001 f9a8 	bl	800179c <isTimer3Expired>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d007      	beq.n	8000462 <fsm1_automatic_run+0x12a>
			setTimer3(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f001 f8a8 	bl	80015a8 <setTimer3>
			timeCountdown1--;
 8000458:	4b4e      	ldr	r3, [pc, #312]	; (8000594 <fsm1_automatic_run+0x25c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a4d      	ldr	r2, [pc, #308]	; (8000594 <fsm1_automatic_run+0x25c>)
 8000460:	6013      	str	r3, [r2, #0]
		}
		if (isTimer1Expired() == 1) {
 8000462:	f001 f977 	bl	8001754 <isTimer1Expired>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d114      	bne.n	8000496 <fsm1_automatic_run+0x15e>
			setTimer1(yellow_duration1);
 800046c:	4b4f      	ldr	r3, [pc, #316]	; (80005ac <fsm1_automatic_run+0x274>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f001 f871 	bl	8001558 <setTimer1>
			status1 = AUTO_YELLOW;
 8000476:	4b45      	ldr	r3, [pc, #276]	; (800058c <fsm1_automatic_run+0x254>)
 8000478:	2203      	movs	r2, #3
 800047a:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 800047c:	2064      	movs	r0, #100	; 0x64
 800047e:	f001 f893 	bl	80015a8 <setTimer3>
			timeCountdown1 = yellow_duration1 / 100;
 8000482:	4b4a      	ldr	r3, [pc, #296]	; (80005ac <fsm1_automatic_run+0x274>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a45      	ldr	r2, [pc, #276]	; (800059c <fsm1_automatic_run+0x264>)
 8000488:	fb82 1203 	smull	r1, r2, r2, r3
 800048c:	1152      	asrs	r2, r2, #5
 800048e:	17db      	asrs	r3, r3, #31
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	4a40      	ldr	r2, [pc, #256]	; (8000594 <fsm1_automatic_run+0x25c>)
 8000494:	6013      	str	r3, [r2, #0]
		}

		if (isButtonPressed(0)) {
 8000496:	2000      	movs	r0, #0
 8000498:	f000 fd2a 	bl	8000ef0 <isButtonPressed>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d06d      	beq.n	800057e <fsm1_automatic_run+0x246>
			clearAllLed();
 80004a2:	f7ff febf 	bl	8000224 <clearAllLed>
			status1 = WAIT;
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <fsm1_automatic_run+0x254>)
 80004a8:	2212      	movs	r2, #18
 80004aa:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 80004ac:	4b3c      	ldr	r3, [pc, #240]	; (80005a0 <fsm1_automatic_run+0x268>)
 80004ae:	2212      	movs	r2, #18
 80004b0:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <fsm1_automatic_run+0x26c>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	601a      	str	r2, [r3, #0]
			clearTimer1();
 80004b8:	f001 f88a 	bl	80015d0 <clearTimer1>
			clearTimer2();
 80004bc:	f001 f898 	bl	80015f0 <clearTimer2>
			clearTimer3();
 80004c0:	f001 f8a6 	bl	8001610 <clearTimer3>
			setTimer1(100);
 80004c4:	2064      	movs	r0, #100	; 0x64
 80004c6:	f001 f847 	bl	8001558 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 80004ca:	4b37      	ldr	r3, [pc, #220]	; (80005a8 <fsm1_automatic_run+0x270>)
 80004cc:	2215      	movs	r2, #21
 80004ce:	601a      	str	r2, [r3, #0]
		}
		break;
 80004d0:	e055      	b.n	800057e <fsm1_automatic_run+0x246>

	case AUTO_YELLOW:
		//TODO
		setYellowLed1();
 80004d2:	f7ff fe4f 	bl	8000174 <setYellowLed1>
		if (isTimer3Expired()) {
 80004d6:	f001 f961 	bl	800179c <isTimer3Expired>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d007      	beq.n	80004f0 <fsm1_automatic_run+0x1b8>
			setTimer3(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f001 f861 	bl	80015a8 <setTimer3>
			timeCountdown1--;
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <fsm1_automatic_run+0x25c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	4a29      	ldr	r2, [pc, #164]	; (8000594 <fsm1_automatic_run+0x25c>)
 80004ee:	6013      	str	r3, [r2, #0]
		}
		if (isTimer1Expired() == 1) {
 80004f0:	f001 f930 	bl	8001754 <isTimer1Expired>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d114      	bne.n	8000524 <fsm1_automatic_run+0x1ec>
			setTimer1(red_duration1);
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <fsm1_automatic_run+0x258>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 f82a 	bl	8001558 <setTimer1>
			status1 = AUTO_RED;
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <fsm1_automatic_run+0x254>)
 8000506:	2202      	movs	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f001 f84c 	bl	80015a8 <setTimer3>
			timeCountdown1 = red_duration1 / 100;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <fsm1_automatic_run+0x258>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a21      	ldr	r2, [pc, #132]	; (800059c <fsm1_automatic_run+0x264>)
 8000516:	fb82 1203 	smull	r1, r2, r2, r3
 800051a:	1152      	asrs	r2, r2, #5
 800051c:	17db      	asrs	r3, r3, #31
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <fsm1_automatic_run+0x25c>)
 8000522:	6013      	str	r3, [r2, #0]
		}

		if (isButtonPressed(0)) {
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fce3 	bl	8000ef0 <isButtonPressed>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d028      	beq.n	8000582 <fsm1_automatic_run+0x24a>
			clearAllLed();
 8000530:	f7ff fe78 	bl	8000224 <clearAllLed>
			status1 = WAIT;
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <fsm1_automatic_run+0x254>)
 8000536:	2212      	movs	r2, #18
 8000538:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <fsm1_automatic_run+0x268>)
 800053c:	2212      	movs	r2, #18
 800053e:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <fsm1_automatic_run+0x26c>)
 8000542:	220c      	movs	r2, #12
 8000544:	601a      	str	r2, [r3, #0]
			clearTimer1();
 8000546:	f001 f843 	bl	80015d0 <clearTimer1>
			clearTimer2();
 800054a:	f001 f851 	bl	80015f0 <clearTimer2>
			clearTimer3();
 800054e:	f001 f85f 	bl	8001610 <clearTimer3>
			setTimer1(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f001 f800 	bl	8001558 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <fsm1_automatic_run+0x270>)
 800055a:	2215      	movs	r2, #21
 800055c:	601a      	str	r2, [r3, #0]
		}
		break;
 800055e:	e010      	b.n	8000582 <fsm1_automatic_run+0x24a>

	case WAIT:
		if(returnFlag1){
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <fsm1_automatic_run+0x278>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <fsm1_automatic_run+0x24e>
			returnFlag1 = 0;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <fsm1_automatic_run+0x278>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
			status1 = INIT;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <fsm1_automatic_run+0x254>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
		}
		break;
 8000574:	e007      	b.n	8000586 <fsm1_automatic_run+0x24e>
	default:
		break;
 8000576:	bf00      	nop
 8000578:	e006      	b.n	8000588 <fsm1_automatic_run+0x250>
		break;
 800057a:	bf00      	nop
 800057c:	e004      	b.n	8000588 <fsm1_automatic_run+0x250>
		break;
 800057e:	bf00      	nop
 8000580:	e002      	b.n	8000588 <fsm1_automatic_run+0x250>
		break;
 8000582:	bf00      	nop
 8000584:	e000      	b.n	8000588 <fsm1_automatic_run+0x250>
		break;
 8000586:	bf00      	nop
	}
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000
 8000590:	2000000c 	.word	0x2000000c
 8000594:	20000054 	.word	0x20000054
 8000598:	20000014 	.word	0x20000014
 800059c:	51eb851f 	.word	0x51eb851f
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000010 	.word	0x20000010
 80005b0:	2000005c 	.word	0x2000005c

080005b4 <fsm2_automatic_run>:

void fsm2_automatic_run() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	switch (status2) {
 80005b8:	4b53      	ldr	r3, [pc, #332]	; (8000708 <fsm2_automatic_run+0x154>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	2b11      	cmp	r3, #17
 80005c0:	f200 8096 	bhi.w	80006f0 <fsm2_automatic_run+0x13c>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <fsm2_automatic_run+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	08000615 	.word	0x08000615
 80005d0:	0800063f 	.word	0x0800063f
 80005d4:	080006a7 	.word	0x080006a7
 80005d8:	08000673 	.word	0x08000673
 80005dc:	080006f1 	.word	0x080006f1
 80005e0:	080006f1 	.word	0x080006f1
 80005e4:	080006f1 	.word	0x080006f1
 80005e8:	080006f1 	.word	0x080006f1
 80005ec:	080006f1 	.word	0x080006f1
 80005f0:	080006f1 	.word	0x080006f1
 80005f4:	080006f1 	.word	0x080006f1
 80005f8:	080006f1 	.word	0x080006f1
 80005fc:	080006f1 	.word	0x080006f1
 8000600:	080006f1 	.word	0x080006f1
 8000604:	080006f1 	.word	0x080006f1
 8000608:	080006f1 	.word	0x080006f1
 800060c:	080006f1 	.word	0x080006f1
 8000610:	080006db 	.word	0x080006db
	case INIT:
		//TODO
		setGreenLed2();
 8000614:	f7ff fdd6 	bl	80001c4 <setGreenLed2>
		status2 = AUTO_GREEN;
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <fsm2_automatic_run+0x154>)
 800061a:	2204      	movs	r2, #4
 800061c:	601a      	str	r2, [r3, #0]
		setTimer2(green_duration2);
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <fsm2_automatic_run+0x158>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 ffac 	bl	8001580 <setTimer2>
		timeCountdown2 = green_duration2 / 100;
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <fsm2_automatic_run+0x158>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a38      	ldr	r2, [pc, #224]	; (8000710 <fsm2_automatic_run+0x15c>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1152      	asrs	r2, r2, #5
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	4a36      	ldr	r2, [pc, #216]	; (8000714 <fsm2_automatic_run+0x160>)
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	e061      	b.n	8000702 <fsm2_automatic_run+0x14e>

	case AUTO_RED:
		//TODO
		setRedLed2();
 800063e:	f7ff fde1 	bl	8000204 <setRedLed2>
		if (isTimer2Expired() == 1) {
 8000642:	f001 f899 	bl	8001778 <isTimer2Expired>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d153      	bne.n	80006f4 <fsm2_automatic_run+0x140>
			setTimer2(green_duration2);
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <fsm2_automatic_run+0x158>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ff95 	bl	8001580 <setTimer2>
			status2 = AUTO_GREEN;
 8000656:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <fsm2_automatic_run+0x154>)
 8000658:	2204      	movs	r2, #4
 800065a:	601a      	str	r2, [r3, #0]
			timeCountdown2 = green_duration2 / 100;
 800065c:	4b2b      	ldr	r3, [pc, #172]	; (800070c <fsm2_automatic_run+0x158>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2b      	ldr	r2, [pc, #172]	; (8000710 <fsm2_automatic_run+0x15c>)
 8000662:	fb82 1203 	smull	r1, r2, r2, r3
 8000666:	1152      	asrs	r2, r2, #5
 8000668:	17db      	asrs	r3, r3, #31
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <fsm2_automatic_run+0x160>)
 800066e:	6013      	str	r3, [r2, #0]
		}

		break;
 8000670:	e040      	b.n	80006f4 <fsm2_automatic_run+0x140>

	case AUTO_GREEN:
		//TODO
		setGreenLed2();
 8000672:	f7ff fda7 	bl	80001c4 <setGreenLed2>
		if (isTimer2Expired() == 1) {
 8000676:	f001 f87f 	bl	8001778 <isTimer2Expired>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d13b      	bne.n	80006f8 <fsm2_automatic_run+0x144>
			setTimer2(yellow_duration2);
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <fsm2_automatic_run+0x164>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f000 ff7b 	bl	8001580 <setTimer2>
			status2 = AUTO_YELLOW;
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <fsm2_automatic_run+0x154>)
 800068c:	2203      	movs	r2, #3
 800068e:	601a      	str	r2, [r3, #0]
			timeCountdown2 = yellow_duration2 / 100;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <fsm2_automatic_run+0x164>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <fsm2_automatic_run+0x15c>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1152      	asrs	r2, r2, #5
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <fsm2_automatic_run+0x160>)
 80006a2:	6013      	str	r3, [r2, #0]
		}
		break;
 80006a4:	e028      	b.n	80006f8 <fsm2_automatic_run+0x144>

	case AUTO_YELLOW:
		//TODO
		setYellowLed2();
 80006a6:	f7ff fd9d 	bl	80001e4 <setYellowLed2>
		if (isTimer2Expired() == 1) {
 80006aa:	f001 f865 	bl	8001778 <isTimer2Expired>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d123      	bne.n	80006fc <fsm2_automatic_run+0x148>
			setTimer2(red_duration2);
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <fsm2_automatic_run+0x168>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 ff61 	bl	8001580 <setTimer2>
			status2 = AUTO_RED;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <fsm2_automatic_run+0x154>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	601a      	str	r2, [r3, #0]
			timeCountdown2 = red_duration2 / 100;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <fsm2_automatic_run+0x168>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <fsm2_automatic_run+0x15c>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1152      	asrs	r2, r2, #5
 80006d0:	17db      	asrs	r3, r3, #31
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <fsm2_automatic_run+0x160>)
 80006d6:	6013      	str	r3, [r2, #0]
		}
		break;
 80006d8:	e010      	b.n	80006fc <fsm2_automatic_run+0x148>

	case WAIT:
		if(returnFlag2){
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <fsm2_automatic_run+0x16c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00e      	beq.n	8000700 <fsm2_automatic_run+0x14c>
			status2 = INIT;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <fsm2_automatic_run+0x154>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
			returnFlag2 = 0;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <fsm2_automatic_run+0x16c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
		}
		break;
 80006ee:	e007      	b.n	8000700 <fsm2_automatic_run+0x14c>
	default:
		break;
 80006f0:	bf00      	nop
 80006f2:	e006      	b.n	8000702 <fsm2_automatic_run+0x14e>
		break;
 80006f4:	bf00      	nop
 80006f6:	e004      	b.n	8000702 <fsm2_automatic_run+0x14e>
		break;
 80006f8:	bf00      	nop
 80006fa:	e002      	b.n	8000702 <fsm2_automatic_run+0x14e>
		break;
 80006fc:	bf00      	nop
 80006fe:	e000      	b.n	8000702 <fsm2_automatic_run+0x14e>
		break;
 8000700:	bf00      	nop
	}
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000004 	.word	0x20000004
 800070c:	20000020 	.word	0x20000020
 8000710:	51eb851f 	.word	0x51eb851f
 8000714:	20000058 	.word	0x20000058
 8000718:	2000001c 	.word	0x2000001c
 800071c:	20000018 	.word	0x20000018
 8000720:	20000060 	.word	0x20000060

08000724 <fsm_modify_timer_control>:
 *      Author: PC
 */

#include "fsm_manual.h"

void fsm_modify_timer_control() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	switch (status3) {
 8000728:	4b84      	ldr	r3, [pc, #528]	; (800093c <fsm_modify_timer_control+0x218>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3b0c      	subs	r3, #12
 800072e:	2b06      	cmp	r3, #6
 8000730:	f200 830b 	bhi.w	8000d4a <fsm_modify_timer_control+0x626>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <fsm_modify_timer_control+0x18>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	08000759 	.word	0x08000759
 8000740:	0800084b 	.word	0x0800084b
 8000744:	08000955 	.word	0x08000955
 8000748:	08000a47 	.word	0x08000a47
 800074c:	08000b51 	.word	0x08000b51
 8000750:	08000c43 	.word	0x08000c43
 8000754:	08000d4b 	.word	0x08000d4b
	case MODIFY_RED1:
		if (isTimer1Expired()) {
 8000758:	f000 fffc 	bl	8001754 <isTimer1Expired>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d014      	beq.n	800078c <fsm_modify_timer_control+0x68>
			setTimer1(50);
 8000762:	2032      	movs	r0, #50	; 0x32
 8000764:	f000 fef8 	bl	8001558 <setTimer1>
			clearAllLed();
 8000768:	f7ff fd5c 	bl	8000224 <clearAllLed>
			counter_toggle++;
 800076c:	4b74      	ldr	r3, [pc, #464]	; (8000940 <fsm_modify_timer_control+0x21c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a73      	ldr	r2, [pc, #460]	; (8000940 <fsm_modify_timer_control+0x21c>)
 8000774:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000776:	4b72      	ldr	r3, [pc, #456]	; (8000940 <fsm_modify_timer_control+0x21c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	dd04      	ble.n	8000788 <fsm_modify_timer_control+0x64>
				counter_toggle = 0;
 800077e:	4b70      	ldr	r3, [pc, #448]	; (8000940 <fsm_modify_timer_control+0x21c>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
				toggleRed2();
 8000784:	f7ff fda2 	bl	80002cc <toggleRed2>
			}
			toggleRed1();
 8000788:	f7ff fd6a 	bl	8000260 <toggleRed1>
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 800078c:	2003      	movs	r0, #3
 800078e:	f000 fbaf 	bl	8000ef0 <isButtonPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00e      	beq.n	80007b6 <fsm_modify_timer_control+0x92>
			clearAllLed();
 8000798:	f7ff fd44 	bl	8000224 <clearAllLed>
			//set new duration1 for red led
			red_duration1 = time_input * 100;
 800079c:	4b69      	ldr	r3, [pc, #420]	; (8000944 <fsm_modify_timer_control+0x220>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2264      	movs	r2, #100	; 0x64
 80007a2:	fb02 f303 	mul.w	r3, r2, r3
 80007a6:	4a68      	ldr	r2, [pc, #416]	; (8000948 <fsm_modify_timer_control+0x224>)
 80007a8:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <fsm_modify_timer_control+0x220>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW1;
 80007b0:	4b62      	ldr	r3, [pc, #392]	; (800093c <fsm_modify_timer_control+0x218>)
 80007b2:	220d      	movs	r2, #13
 80007b4:	601a      	str	r2, [r3, #0]
		}
		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fb9a 	bl	8000ef0 <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <fsm_modify_timer_control+0xaa>
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 fbb4 	bl	8000f30 <isButtonPressed1s>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d015      	beq.n	80007fa <fsm_modify_timer_control+0xd6>
			time_input = (time_input + 1) % 100; //max value is 99
 80007ce:	4b5d      	ldr	r3, [pc, #372]	; (8000944 <fsm_modify_timer_control+0x220>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <fsm_modify_timer_control+0x228>)
 80007d6:	fb83 1302 	smull	r1, r3, r3, r2
 80007da:	1159      	asrs	r1, r3, #5
 80007dc:	17d3      	asrs	r3, r2, #31
 80007de:	1acb      	subs	r3, r1, r3
 80007e0:	2164      	movs	r1, #100	; 0x64
 80007e2:	fb01 f303 	mul.w	r3, r1, r3
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	4a56      	ldr	r2, [pc, #344]	; (8000944 <fsm_modify_timer_control+0x220>)
 80007ea:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 80007ec:	4b55      	ldr	r3, [pc, #340]	; (8000944 <fsm_modify_timer_control+0x220>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <fsm_modify_timer_control+0xd6>
				time_input = 1; //0 is invalid value
 80007f4:	4b53      	ldr	r3, [pc, #332]	; (8000944 <fsm_modify_timer_control+0x220>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 80007fa:	2002      	movs	r0, #2
 80007fc:	f000 fb78 	bl	8000ef0 <isButtonPressed>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d105      	bne.n	8000812 <fsm_modify_timer_control+0xee>
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fb92 	bl	8000f30 <isButtonPressed1s>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <fsm_modify_timer_control+0x106>
			time_input = (time_input - 1);
 8000812:	4b4c      	ldr	r3, [pc, #304]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3b01      	subs	r3, #1
 8000818:	4a4a      	ldr	r2, [pc, #296]	; (8000944 <fsm_modify_timer_control+0x220>)
 800081a:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 800081c:	4b49      	ldr	r3, [pc, #292]	; (8000944 <fsm_modify_timer_control+0x220>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <fsm_modify_timer_control+0x106>
				time_input = 99; //0 is invalid value
 8000824:	4b47      	ldr	r3, [pc, #284]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000826:	2263      	movs	r2, #99	; 0x63
 8000828:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fb60 	bl	8000ef0 <isButtonPressed>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 828b 	beq.w	8000d4e <fsm_modify_timer_control+0x62a>
			clearAllLed();
 8000838:	f7ff fcf4 	bl	8000224 <clearAllLed>
			time_input = 1;
 800083c:	4b41      	ldr	r3, [pc, #260]	; (8000944 <fsm_modify_timer_control+0x220>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW1;
 8000842:	4b3e      	ldr	r3, [pc, #248]	; (800093c <fsm_modify_timer_control+0x218>)
 8000844:	220d      	movs	r2, #13
 8000846:	601a      	str	r2, [r3, #0]
		}
		break;
 8000848:	e281      	b.n	8000d4e <fsm_modify_timer_control+0x62a>

	case MODIFY_YELLOW1:
		if (isTimer1Expired()) {
 800084a:	f000 ff83 	bl	8001754 <isTimer1Expired>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d014      	beq.n	800087e <fsm_modify_timer_control+0x15a>
			setTimer1(50);
 8000854:	2032      	movs	r0, #50	; 0x32
 8000856:	f000 fe7f 	bl	8001558 <setTimer1>
			clearAllLed();
 800085a:	f7ff fce3 	bl	8000224 <clearAllLed>
			toggleYellow1();
 800085e:	f7ff fd11 	bl	8000284 <toggleYellow1>
			counter_toggle++;
 8000862:	4b37      	ldr	r3, [pc, #220]	; (8000940 <fsm_modify_timer_control+0x21c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	4a35      	ldr	r2, [pc, #212]	; (8000940 <fsm_modify_timer_control+0x21c>)
 800086a:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <fsm_modify_timer_control+0x21c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b02      	cmp	r3, #2
 8000872:	dd04      	ble.n	800087e <fsm_modify_timer_control+0x15a>
				counter_toggle = 0;
 8000874:	4b32      	ldr	r3, [pc, #200]	; (8000940 <fsm_modify_timer_control+0x21c>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
				toggleYellow2();
 800087a:	f7ff fd39 	bl	80002f0 <toggleYellow2>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 800087e:	2003      	movs	r0, #3
 8000880:	f000 fb36 	bl	8000ef0 <isButtonPressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00e      	beq.n	80008a8 <fsm_modify_timer_control+0x184>
			clearAllLed();
 800088a:	f7ff fccb 	bl	8000224 <clearAllLed>
			//set new duration1 for yellow led
			yellow_duration1 = time_input * 100;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2264      	movs	r2, #100	; 0x64
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <fsm_modify_timer_control+0x22c>)
 800089a:	6013      	str	r3, [r2, #0]
			time_input = 1;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <fsm_modify_timer_control+0x220>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN1;
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <fsm_modify_timer_control+0x218>)
 80008a4:	220e      	movs	r2, #14
 80008a6:	601a      	str	r2, [r3, #0]
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fb21 	bl	8000ef0 <isButtonPressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <fsm_modify_timer_control+0x19c>
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fb3b 	bl	8000f30 <isButtonPressed1s>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d015      	beq.n	80008ec <fsm_modify_timer_control+0x1c8>
			time_input = (time_input + 1) % 100; //99 is the max value
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <fsm_modify_timer_control+0x220>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <fsm_modify_timer_control+0x228>)
 80008c8:	fb83 1302 	smull	r1, r3, r3, r2
 80008cc:	1159      	asrs	r1, r3, #5
 80008ce:	17d3      	asrs	r3, r2, #31
 80008d0:	1acb      	subs	r3, r1, r3
 80008d2:	2164      	movs	r1, #100	; 0x64
 80008d4:	fb01 f303 	mul.w	r3, r1, r3
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <fsm_modify_timer_control+0x220>)
 80008dc:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <fsm_modify_timer_control+0x220>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <fsm_modify_timer_control+0x1c8>
				time_input = 1; //0 is invalid value
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <fsm_modify_timer_control+0x220>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 faff 	bl	8000ef0 <isButtonPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d105      	bne.n	8000904 <fsm_modify_timer_control+0x1e0>
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fb19 	bl	8000f30 <isButtonPressed1s>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00b      	beq.n	800091c <fsm_modify_timer_control+0x1f8>
			time_input = (time_input - 1);
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3b01      	subs	r3, #1
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <fsm_modify_timer_control+0x220>)
 800090c:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <fsm_modify_timer_control+0x1f8>
				time_input = 99; //0 is invalid value
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000918:	2263      	movs	r2, #99	; 0x63
 800091a:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fae7 	bl	8000ef0 <isButtonPressed>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8214 	beq.w	8000d52 <fsm_modify_timer_control+0x62e>
			clearAllLed();
 800092a:	f7ff fc7b 	bl	8000224 <clearAllLed>
			time_input = 1;
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <fsm_modify_timer_control+0x220>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN1;
 8000934:	4b01      	ldr	r3, [pc, #4]	; (800093c <fsm_modify_timer_control+0x218>)
 8000936:	220e      	movs	r2, #14
 8000938:	601a      	str	r2, [r3, #0]
		}
		break;
 800093a:	e20a      	b.n	8000d52 <fsm_modify_timer_control+0x62e>
 800093c:	20000008 	.word	0x20000008
 8000940:	2000006c 	.word	0x2000006c
 8000944:	20000024 	.word	0x20000024
 8000948:	2000000c 	.word	0x2000000c
 800094c:	51eb851f 	.word	0x51eb851f
 8000950:	20000010 	.word	0x20000010

	case MODIFY_GREEN1:
		if (isTimer1Expired()) {
 8000954:	f000 fefe 	bl	8001754 <isTimer1Expired>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d014      	beq.n	8000988 <fsm_modify_timer_control+0x264>
			setTimer1(50);
 800095e:	2032      	movs	r0, #50	; 0x32
 8000960:	f000 fdfa 	bl	8001558 <setTimer1>
			clearAllLed();
 8000964:	f7ff fc5e 	bl	8000224 <clearAllLed>
			toggleGreen1();
 8000968:	f7ff fc9e 	bl	80002a8 <toggleGreen1>
			counter_toggle++;
 800096c:	4b72      	ldr	r3, [pc, #456]	; (8000b38 <fsm_modify_timer_control+0x414>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a71      	ldr	r2, [pc, #452]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000974:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000976:	4b70      	ldr	r3, [pc, #448]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	dd04      	ble.n	8000988 <fsm_modify_timer_control+0x264>
				counter_toggle = 0;
 800097e:	4b6e      	ldr	r3, [pc, #440]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
				toggleGreen2();
 8000984:	f7ff fcc6 	bl	8000314 <toggleGreen2>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fab1 	bl	8000ef0 <isButtonPressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00e      	beq.n	80009b2 <fsm_modify_timer_control+0x28e>
			clearAllLed();
 8000994:	f7ff fc46 	bl	8000224 <clearAllLed>
			//set new duration1 for green led
			green_duration1 = time_input * 100;
 8000998:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <fsm_modify_timer_control+0x418>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2264      	movs	r2, #100	; 0x64
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	4a67      	ldr	r2, [pc, #412]	; (8000b40 <fsm_modify_timer_control+0x41c>)
 80009a4:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80009a6:	4b65      	ldr	r3, [pc, #404]	; (8000b3c <fsm_modify_timer_control+0x418>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED2;
 80009ac:	4b65      	ldr	r3, [pc, #404]	; (8000b44 <fsm_modify_timer_control+0x420>)
 80009ae:	220f      	movs	r2, #15
 80009b0:	601a      	str	r2, [r3, #0]
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fa9c 	bl	8000ef0 <isButtonPressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d105      	bne.n	80009ca <fsm_modify_timer_control+0x2a6>
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fab6 	bl	8000f30 <isButtonPressed1s>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d015      	beq.n	80009f6 <fsm_modify_timer_control+0x2d2>
			time_input = (time_input + 1) % 100; //99 is the max value
 80009ca:	4b5c      	ldr	r3, [pc, #368]	; (8000b3c <fsm_modify_timer_control+0x418>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <fsm_modify_timer_control+0x424>)
 80009d2:	fb83 1302 	smull	r1, r3, r3, r2
 80009d6:	1159      	asrs	r1, r3, #5
 80009d8:	17d3      	asrs	r3, r2, #31
 80009da:	1acb      	subs	r3, r1, r3
 80009dc:	2164      	movs	r1, #100	; 0x64
 80009de:	fb01 f303 	mul.w	r3, r1, r3
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	4a55      	ldr	r2, [pc, #340]	; (8000b3c <fsm_modify_timer_control+0x418>)
 80009e6:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <fsm_modify_timer_control+0x418>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <fsm_modify_timer_control+0x2d2>
				time_input = 1; //1 is invalid value
 80009f0:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <fsm_modify_timer_control+0x418>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 80009f6:	2002      	movs	r0, #2
 80009f8:	f000 fa7a 	bl	8000ef0 <isButtonPressed>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d105      	bne.n	8000a0e <fsm_modify_timer_control+0x2ea>
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 fa94 	bl	8000f30 <isButtonPressed1s>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00b      	beq.n	8000a26 <fsm_modify_timer_control+0x302>
			time_input = (time_input - 1);
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a16:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <fsm_modify_timer_control+0x302>
				time_input = 99; //0 is invalid value
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a22:	2263      	movs	r2, #99	; 0x63
 8000a24:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fa62 	bl	8000ef0 <isButtonPressed>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8191 	beq.w	8000d56 <fsm_modify_timer_control+0x632>
			clearAllLed();
 8000a34:	f7ff fbf6 	bl	8000224 <clearAllLed>
			time_input = 1;
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED2;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <fsm_modify_timer_control+0x420>)
 8000a40:	220f      	movs	r2, #15
 8000a42:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a44:	e187      	b.n	8000d56 <fsm_modify_timer_control+0x632>

	case MODIFY_RED2:
		if (isTimer1Expired()) {
 8000a46:	f000 fe85 	bl	8001754 <isTimer1Expired>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d014      	beq.n	8000a7a <fsm_modify_timer_control+0x356>
			setTimer1(50);
 8000a50:	2032      	movs	r0, #50	; 0x32
 8000a52:	f000 fd81 	bl	8001558 <setTimer1>
			clearAllLed();
 8000a56:	f7ff fbe5 	bl	8000224 <clearAllLed>
			toggleRed2();
 8000a5a:	f7ff fc37 	bl	80002cc <toggleRed2>
			counter_toggle++;
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a34      	ldr	r2, [pc, #208]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000a66:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000a68:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	dd04      	ble.n	8000a7a <fsm_modify_timer_control+0x356>
				counter_toggle = 0;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <fsm_modify_timer_control+0x414>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
				toggleRed1();
 8000a76:	f7ff fbf3 	bl	8000260 <toggleRed1>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 fa38 	bl	8000ef0 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00e      	beq.n	8000aa4 <fsm_modify_timer_control+0x380>
			clearAllLed();
 8000a86:	f7ff fbcd 	bl	8000224 <clearAllLed>
			//set new duration1 for green led
			red_duration2 = time_input * 100;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2264      	movs	r2, #100	; 0x64
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <fsm_modify_timer_control+0x428>)
 8000a96:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW2;
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <fsm_modify_timer_control+0x420>)
 8000aa0:	2210      	movs	r2, #16
 8000aa2:	601a      	str	r2, [r3, #0]
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fa23 	bl	8000ef0 <isButtonPressed>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <fsm_modify_timer_control+0x398>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 fa3d 	bl	8000f30 <isButtonPressed1s>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d015      	beq.n	8000ae8 <fsm_modify_timer_control+0x3c4>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <fsm_modify_timer_control+0x424>)
 8000ac4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ac8:	1159      	asrs	r1, r3, #5
 8000aca:	17d3      	asrs	r3, r2, #31
 8000acc:	1acb      	subs	r3, r1, r3
 8000ace:	2164      	movs	r1, #100	; 0x64
 8000ad0:	fb01 f303 	mul.w	r3, r1, r3
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000ad8:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <fsm_modify_timer_control+0x3c4>
				time_input = 1; //1 is invalid value
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f000 fa01 	bl	8000ef0 <isButtonPressed>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <fsm_modify_timer_control+0x3dc>
 8000af4:	2002      	movs	r0, #2
 8000af6:	f000 fa1b 	bl	8000f30 <isButtonPressed1s>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <fsm_modify_timer_control+0x3f4>
			time_input = (time_input - 1);
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000b08:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <fsm_modify_timer_control+0x3f4>
				time_input = 99; //0 is invalid value
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000b14:	2263      	movs	r2, #99	; 0x63
 8000b16:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 f9e9 	bl	8000ef0 <isButtonPressed>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f000 811a 	beq.w	8000d5a <fsm_modify_timer_control+0x636>
			clearAllLed();
 8000b26:	f7ff fb7d 	bl	8000224 <clearAllLed>
			time_input = 1;
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <fsm_modify_timer_control+0x418>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW2;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <fsm_modify_timer_control+0x420>)
 8000b32:	2210      	movs	r2, #16
 8000b34:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b36:	e110      	b.n	8000d5a <fsm_modify_timer_control+0x636>
 8000b38:	2000006c 	.word	0x2000006c
 8000b3c:	20000024 	.word	0x20000024
 8000b40:	20000014 	.word	0x20000014
 8000b44:	20000008 	.word	0x20000008
 8000b48:	51eb851f 	.word	0x51eb851f
 8000b4c:	20000018 	.word	0x20000018

	case MODIFY_YELLOW2:
		if (isTimer1Expired()) {
 8000b50:	f000 fe00 	bl	8001754 <isTimer1Expired>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d014      	beq.n	8000b84 <fsm_modify_timer_control+0x460>
			setTimer1(50);
 8000b5a:	2032      	movs	r0, #50	; 0x32
 8000b5c:	f000 fcfc 	bl	8001558 <setTimer1>
			clearAllLed();
 8000b60:	f7ff fb60 	bl	8000224 <clearAllLed>
			toggleYellow2();
 8000b64:	f7ff fbc4 	bl	80002f0 <toggleYellow2>
			counter_toggle++;
 8000b68:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a7e      	ldr	r2, [pc, #504]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000b70:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000b72:	4b7d      	ldr	r3, [pc, #500]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	dd04      	ble.n	8000b84 <fsm_modify_timer_control+0x460>
				counter_toggle = 0;
 8000b7a:	4b7b      	ldr	r3, [pc, #492]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
				toggleYellow1();
 8000b80:	f7ff fb80 	bl	8000284 <toggleYellow1>
			}
		}

		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f9b3 	bl	8000ef0 <isButtonPressed>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00e      	beq.n	8000bae <fsm_modify_timer_control+0x48a>
			clearAllLed();
 8000b90:	f7ff fb48 	bl	8000224 <clearAllLed>
			//set new duration1 for yellow led
			yellow_duration2 = time_input * 100;
 8000b94:	4b75      	ldr	r3, [pc, #468]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	4a74      	ldr	r2, [pc, #464]	; (8000d70 <fsm_modify_timer_control+0x64c>)
 8000ba0:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN2;
 8000ba8:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <fsm_modify_timer_control+0x650>)
 8000baa:	2211      	movs	r2, #17
 8000bac:	601a      	str	r2, [r3, #0]
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 f99e 	bl	8000ef0 <isButtonPressed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d105      	bne.n	8000bc6 <fsm_modify_timer_control+0x4a2>
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 f9b8 	bl	8000f30 <isButtonPressed1s>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d015      	beq.n	8000bf2 <fsm_modify_timer_control+0x4ce>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	; (8000d78 <fsm_modify_timer_control+0x654>)
 8000bce:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd2:	1159      	asrs	r1, r3, #5
 8000bd4:	17d3      	asrs	r3, r2, #31
 8000bd6:	1acb      	subs	r3, r1, r3
 8000bd8:	2164      	movs	r1, #100	; 0x64
 8000bda:	fb01 f303 	mul.w	r3, r1, r3
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4a62      	ldr	r2, [pc, #392]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000be2:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000be4:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <fsm_modify_timer_control+0x4ce>
				time_input = 1; //0 is invalid value
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000bf2:	2002      	movs	r0, #2
 8000bf4:	f000 f97c 	bl	8000ef0 <isButtonPressed>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d105      	bne.n	8000c0a <fsm_modify_timer_control+0x4e6>
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 f996 	bl	8000f30 <isButtonPressed1s>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00b      	beq.n	8000c22 <fsm_modify_timer_control+0x4fe>
			time_input = (time_input - 1);
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a56      	ldr	r2, [pc, #344]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c12:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000c14:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <fsm_modify_timer_control+0x4fe>
				time_input = 99; //0 is invalid value
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c1e:	2263      	movs	r2, #99	; 0x63
 8000c20:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f964 	bl	8000ef0 <isButtonPressed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 8097 	beq.w	8000d5e <fsm_modify_timer_control+0x63a>
			clearAllLed();
 8000c30:	f7ff faf8 	bl	8000224 <clearAllLed>
			time_input = 1;
 8000c34:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN2;
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <fsm_modify_timer_control+0x650>)
 8000c3c:	2211      	movs	r2, #17
 8000c3e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c40:	e08d      	b.n	8000d5e <fsm_modify_timer_control+0x63a>

	case MODIFY_GREEN2:
		if (isTimer1Expired()) {
 8000c42:	f000 fd87 	bl	8001754 <isTimer1Expired>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d014      	beq.n	8000c76 <fsm_modify_timer_control+0x552>
			setTimer1(50);
 8000c4c:	2032      	movs	r0, #50	; 0x32
 8000c4e:	f000 fc83 	bl	8001558 <setTimer1>
			clearAllLed();
 8000c52:	f7ff fae7 	bl	8000224 <clearAllLed>
			toggleGreen2();
 8000c56:	f7ff fb5d 	bl	8000314 <toggleGreen2>
			counter_toggle++;
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	4a41      	ldr	r2, [pc, #260]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000c62:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000c64:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	dd04      	ble.n	8000c76 <fsm_modify_timer_control+0x552>
				counter_toggle = 0;
 8000c6c:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <fsm_modify_timer_control+0x644>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
				toggleGreen1();
 8000c72:	f7ff fb19 	bl	80002a8 <toggleGreen1>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 f93a 	bl	8000ef0 <isButtonPressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d014      	beq.n	8000cac <fsm_modify_timer_control+0x588>
			clearAllLed();
 8000c82:	f7ff facf 	bl	8000224 <clearAllLed>
			//set new duration1 for green led
			green_duration2 = time_input * 100;
 8000c86:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2264      	movs	r2, #100	; 0x64
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	4a3a      	ldr	r2, [pc, #232]	; (8000d7c <fsm_modify_timer_control+0x658>)
 8000c92:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
			//turn on return flag for the fsm auto can change it's state
			returnFlag1 = 1;
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <fsm_modify_timer_control+0x65c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
			returnFlag2 = 1;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <fsm_modify_timer_control+0x660>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
			status3 = WAIT;
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <fsm_modify_timer_control+0x650>)
 8000ca8:	2212      	movs	r2, #18
 8000caa:	601a      	str	r2, [r3, #0]
			//set display pointer back to normal
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 f91f 	bl	8000ef0 <isButtonPressed>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d105      	bne.n	8000cc4 <fsm_modify_timer_control+0x5a0>
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f000 f939 	bl	8000f30 <isButtonPressed1s>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d015      	beq.n	8000cf0 <fsm_modify_timer_control+0x5cc>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <fsm_modify_timer_control+0x654>)
 8000ccc:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd0:	1159      	asrs	r1, r3, #5
 8000cd2:	17d3      	asrs	r3, r2, #31
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	2164      	movs	r1, #100	; 0x64
 8000cd8:	fb01 f303 	mul.w	r3, r1, r3
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000ce0:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <fsm_modify_timer_control+0x5cc>
				time_input = 1; //1 is invalid value
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f000 f8fd 	bl	8000ef0 <isButtonPressed>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <fsm_modify_timer_control+0x5e4>
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 f917 	bl	8000f30 <isButtonPressed1s>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <fsm_modify_timer_control+0x5fc>
			time_input = (time_input - 1);
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000d10:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <fsm_modify_timer_control+0x5fc>
				time_input = 99; //0 is invalid value
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000d1c:	2263      	movs	r2, #99	; 0x63
 8000d1e:	601a      	str	r2, [r3, #0]
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 f8e5 	bl	8000ef0 <isButtonPressed>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d01a      	beq.n	8000d62 <fsm_modify_timer_control+0x63e>
			time_input = 1;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <fsm_modify_timer_control+0x648>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000d32:	f7ff fa77 	bl	8000224 <clearAllLed>
			returnFlag1 = 1;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <fsm_modify_timer_control+0x65c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
			returnFlag2 = 1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <fsm_modify_timer_control+0x660>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
			status3 = WAIT;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <fsm_modify_timer_control+0x650>)
 8000d44:	2212      	movs	r2, #18
 8000d46:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d48:	e00b      	b.n	8000d62 <fsm_modify_timer_control+0x63e>
	case WAIT:
		//DO NOTHING
		break;

	default:
		break;
 8000d4a:	bf00      	nop
 8000d4c:	e00a      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d4e:	bf00      	nop
 8000d50:	e008      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d52:	bf00      	nop
 8000d54:	e006      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d56:	bf00      	nop
 8000d58:	e004      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d5a:	bf00      	nop
 8000d5c:	e002      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <fsm_modify_timer_control+0x640>
		break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000006c 	.word	0x2000006c
 8000d6c:	20000024 	.word	0x20000024
 8000d70:	2000001c 	.word	0x2000001c
 8000d74:	20000008 	.word	0x20000008
 8000d78:	51eb851f 	.word	0x51eb851f
 8000d7c:	20000020 	.word	0x20000020
 8000d80:	2000005c 	.word	0x2000005c
 8000d84:	20000060 	.word	0x20000060

08000d88 <button_reading>:
		flagForButtonPress1s[i] = BUTTON_FLAG_CLEAR;
		counterForButtonPress1s[i] = 0;
	}
}

void button_reading(void) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	e092      	b.n	8000eba <button_reading+0x132>
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	494c      	ldr	r1, [pc, #304]	; (8000ecc <button_reading+0x144>)
 8000d9a:	5c89      	ldrb	r1, [r1, r2]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <button_reading+0x148>)
 8000d9e:	54d1      	strb	r1, [r2, r3]
		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000da0:	79fa      	ldrb	r2, [r7, #7]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	494b      	ldr	r1, [pc, #300]	; (8000ed4 <button_reading+0x14c>)
 8000da6:	5c89      	ldrb	r1, [r1, r2]
 8000da8:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <button_reading+0x144>)
 8000daa:	54d1      	strb	r1, [r2, r3]
		//update the lasted button state in buffer 1
		//debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, buttonPin[i]);
		if (i == 0) {
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <button_reading+0x3e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port,
 8000db2:	79fc      	ldrb	r4, [r7, #7]
 8000db4:	2101      	movs	r1, #1
 8000db6:	4848      	ldr	r0, [pc, #288]	; (8000ed8 <button_reading+0x150>)
 8000db8:	f001 f81c 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <button_reading+0x14c>)
 8000dc2:	551a      	strb	r2, [r3, r4]
 8000dc4:	e025      	b.n	8000e12 <button_reading+0x8a>
			Button0_Pin);
		} else if (i == 1) {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d109      	bne.n	8000de0 <button_reading+0x58>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port,
 8000dcc:	79fc      	ldrb	r4, [r7, #7]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4841      	ldr	r0, [pc, #260]	; (8000ed8 <button_reading+0x150>)
 8000dd2:	f001 f80f 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <button_reading+0x14c>)
 8000ddc:	551a      	strb	r2, [r3, r4]
 8000dde:	e018      	b.n	8000e12 <button_reading+0x8a>
			Button1_Pin);
		} else if (i == 2) {
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d109      	bne.n	8000dfa <button_reading+0x72>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port,
 8000de6:	79fc      	ldrb	r4, [r7, #7]
 8000de8:	2110      	movs	r1, #16
 8000dea:	483b      	ldr	r0, [pc, #236]	; (8000ed8 <button_reading+0x150>)
 8000dec:	f001 f802 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <button_reading+0x14c>)
 8000df6:	551a      	strb	r2, [r3, r4]
 8000df8:	e00b      	b.n	8000e12 <button_reading+0x8a>
			Button2_Pin);
		} else if (i == 3) {
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d108      	bne.n	8000e12 <button_reading+0x8a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port,
 8000e00:	79fc      	ldrb	r4, [r7, #7]
 8000e02:	2101      	movs	r1, #1
 8000e04:	4835      	ldr	r0, [pc, #212]	; (8000edc <button_reading+0x154>)
 8000e06:	f000 fff5 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <button_reading+0x14c>)
 8000e10:	551a      	strb	r2, [r3, r4]
			Button3_Pin);
		}
		if ((debounceButtonBuffer2[i] == debounceButtonBuffer1[i])
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <button_reading+0x144>)
 8000e16:	5cd2      	ldrb	r2, [r2, r3]
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	492e      	ldr	r1, [pc, #184]	; (8000ed4 <button_reading+0x14c>)
 8000e1c:	5ccb      	ldrb	r3, [r1, r3]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d148      	bne.n	8000eb4 <button_reading+0x12c>
				&& (debounceButtonBuffer2[i] == debounceButtonBuffer3[i])) {
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <button_reading+0x144>)
 8000e26:	5cd2      	ldrb	r2, [r2, r3]
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4929      	ldr	r1, [pc, #164]	; (8000ed0 <button_reading+0x148>)
 8000e2c:	5ccb      	ldrb	r3, [r1, r3]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d140      	bne.n	8000eb4 <button_reading+0x12c>
			if (debounceButtonBuffer3[i] != debounceButtonBuffer4[i]) {
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <button_reading+0x148>)
 8000e36:	5cd2      	ldrb	r2, [r2, r3]
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4929      	ldr	r1, [pc, #164]	; (8000ee0 <button_reading+0x158>)
 8000e3c:	5ccb      	ldrb	r3, [r1, r3]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d01a      	beq.n	8000e78 <button_reading+0xf0>
				//state different, mean there's a transition in button state
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4922      	ldr	r1, [pc, #136]	; (8000ed0 <button_reading+0x148>)
 8000e48:	5c89      	ldrb	r1, [r1, r2]
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <button_reading+0x158>)
 8000e4c:	54d1      	strb	r1, [r2, r3]
				if (debounceButtonBuffer4[i] == BUTTON_IS_PRESSED) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <button_reading+0x158>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <button_reading+0xdc>
					//on falling edge of transition
//					TimeOutForKeyPress = 500;   //additional feature
					buttonFlags[i] = BUTTON_FLAG_SET;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <button_reading+0x15c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e62:	e027      	b.n	8000eb4 <button_reading+0x12c>
				} else {
					//rising eadge, which mean button is release;
//					TimeOutForKeyPress[i]--;
					counterForButtonPress1s[i] = 0;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <button_reading+0x160>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <button_reading+0x158>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	54d1      	strb	r1, [r2, r3]
 8000e76:	e01d      	b.n	8000eb4 <button_reading+0x12c>
				}
			} else {
				//buffer same state, which mean key is still hold, increase counter
				if (debounceButtonBuffer4[i] == BUTTON_IS_PRESSED) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <button_reading+0x158>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <button_reading+0x12c>
					if (counterForButtonPress1s[i]
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <button_reading+0x160>)
 8000e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8a:	2b31      	cmp	r3, #49	; 0x31
 8000e8c:	d812      	bhi.n	8000eb4 <button_reading+0x12c>
							< DURATION_FOR_AUTO_INCREASING) {
						counterForButtonPress1s[i]++;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <button_reading+0x160>)
 8000e92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e96:	3201      	adds	r2, #1
 8000e98:	b291      	uxth	r1, r2
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <button_reading+0x160>)
 8000e9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if (counterForButtonPress1s[i]
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <button_reading+0x160>)
 8000ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea8:	2b32      	cmp	r3, #50	; 0x32
 8000eaa:	d103      	bne.n	8000eb4 <button_reading+0x12c>
								== DURATION_FOR_AUTO_INCREASING) {
							flagForButtonPress1s[i] = BUTTON_FLAG_SET;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <button_reading+0x164>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++) {
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	f67f af69 	bls.w	8000d94 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	20000088 	.word	0x20000088
 8000ed4:	20000080 	.word	0x20000080
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	20000070 	.word	0x20000070
 8000ee8:	20000094 	.word	0x20000094
 8000eec:	20000090 	.word	0x20000090

08000ef0 <isButtonPressed>:

unsigned char isButtonPressed(unsigned char index) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d901      	bls.n	8000f04 <isButtonPressed+0x14>
		return 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e00d      	b.n	8000f20 <isButtonPressed+0x30>
	if (buttonFlags[index] == BUTTON_FLAG_SET) {
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <isButtonPressed+0x3c>)
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d106      	bne.n	8000f1e <isButtonPressed+0x2e>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <isButtonPressed+0x3c>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <isButtonPressed+0x30>
	} else
		return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000070 	.word	0x20000070

08000f30 <isButtonPressed1s>:

unsigned char isButtonPressed1s(unsigned char index) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d901      	bls.n	8000f44 <isButtonPressed1s+0x14>
		return 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e010      	b.n	8000f66 <isButtonPressed1s+0x36>
	if (flagForButtonPress1s[index] == BUTTON_FLAG_SET) {
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <isButtonPressed1s+0x40>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10a      	bne.n	8000f64 <isButtonPressed1s+0x34>
		//clear button hold more than 1s flags and return
		flagForButtonPress1s[index] = BUTTON_FLAG_CLEAR;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <isButtonPressed1s+0x40>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	54d1      	strb	r1, [r2, r3]
		//clear counter
		counterForButtonPress1s[index] = 0;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <isButtonPressed1s+0x44>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <isButtonPressed1s+0x36>
	} else
		return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000090 	.word	0x20000090
 8000f74:	20000094 	.word	0x20000094

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f000 fc46 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f81e 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f94a 	bl	800121c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f88:	f000 f85c 	bl	8001044 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 f91c 	bl	80011c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f90:	f000 f8a4 	bl	80010dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <main+0x40>)
 8000f96:	f001 fbc7 	bl	8002728 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <main+0x44>)
 8000f9e:	f001 fc6d 	bl	800287c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(50);
 8000fa2:	2032      	movs	r0, #50	; 0x32
 8000fa4:	f000 fad8 	bl	8001558 <setTimer1>
	while (1) {
		fsm1_automatic_run();
 8000fa8:	f7ff f9c6 	bl	8000338 <fsm1_automatic_run>
		fsm2_automatic_run();
 8000fac:	f7ff fb02 	bl	80005b4 <fsm2_automatic_run>
		fsm_modify_timer_control();
 8000fb0:	f7ff fbb8 	bl	8000724 <fsm_modify_timer_control>
		fsm1_automatic_run();
 8000fb4:	e7f8      	b.n	8000fa8 <main+0x30>
 8000fb6:	bf00      	nop
 8000fb8:	2000009c 	.word	0x2000009c
 8000fbc:	200000e4 	.word	0x200000e4

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b090      	sub	sp, #64	; 0x40
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	2228      	movs	r2, #40	; 0x28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fbb8 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fea:	2310      	movs	r3, #16
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ff6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff27 	bl	8001e54 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800100c:	f000 f980 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f994 	bl	8002358 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001036:	f000 f96b 	bl	8001310 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3740      	adds	r7, #64	; 0x40
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001062:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001066:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM2_Init+0x94>)
 800106a:	223f      	movs	r2, #63	; 0x3f
 800106c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001076:	f242 720f 	movw	r2, #9999	; 0x270f
 800107a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM2_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_TIM2_Init+0x94>)
 800108a:	f001 fafd 	bl	8002688 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001094:	f000 f93c 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010a6:	f001 fe51 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 f92e 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010c2:	f002 f9cf 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f920 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000009c 	.word	0x2000009c

080010dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <MX_TIM3_Init+0xe8>)
 8001110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001114:	223f      	movs	r2, #63	; 0x3f
 8001116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001120:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001134:	f001 faa8 	bl	8002688 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800113e:	f000 f8e7 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001150:	f001 fdfc 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800115a:	f000 f8d9 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM3_Init+0xe4>)
 8001160:	f001 fb34 	bl	80027cc <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800116a:	f000 f8d1 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_TIM3_Init+0xe4>)
 800117e:	f002 f971 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001188:	f000 f8c2 	bl	8001310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM3_Init+0xe4>)
 80011a4:	f001 fd14 	bl	8002bd0 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ae:	f000 f8af 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM3_Init+0xe4>)
 80011b4:	f000 f91c 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000e4 	.word	0x200000e4
 80011c4:	40000400 	.word	0x40000400

080011c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART2_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART2_UART_Init+0x4c>)
 8001200:	f002 f9a0 	bl	8003544 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f881 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000012c 	.word	0x2000012c
 8001218:	40004400 	.word	0x40004400

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_GPIO_Init+0xd0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <MX_GPIO_Init+0xd0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <MX_GPIO_Init+0xd0>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_GPIO_Init+0xd0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L2_EN0_Pin|L0_EN1_Pin|L1_EN1_Pin|L1_EN0_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001266:	4822      	ldr	r0, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xd4>)
 8001268:	f000 fddb 	bl	8001e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L2_EN1_Pin|L0_EN0_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001272:	4820      	ldr	r0, [pc, #128]	; (80012f4 <MX_GPIO_Init+0xd8>)
 8001274:	f000 fdd5 	bl	8001e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001278:	2313      	movs	r3, #19
 800127a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MX_GPIO_Init+0xd8>)
 800128c:	f000 fc2e 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001290:	2301      	movs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4619      	mov	r1, r3
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_GPIO_Init+0xd4>)
 80012a4:	f000 fc22 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_EN0_Pin L0_EN1_Pin L1_EN1_Pin L1_EN0_Pin */
  GPIO_InitStruct.Pin = L2_EN0_Pin|L0_EN1_Pin|L1_EN1_Pin|L1_EN0_Pin;
 80012a8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80012ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2302      	movs	r3, #2
 80012b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <MX_GPIO_Init+0xd4>)
 80012c2:	f000 fc13 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_EN1_Pin L0_EN0_Pin */
  GPIO_InitStruct.Pin = L2_EN1_Pin|L0_EN0_Pin;
 80012c6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_GPIO_Init+0xd8>)
 80012e0:	f000 fc04 	bl	8001aec <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	timerRun();
 8001300:	f000 f996 	bl	8001630 <timerRun>
	button_reading();
 8001304:	f7ff fd40 	bl	8000d88 <button_reading>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_MspInit+0x5c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_MspInit+0x5c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_MspInit+0x60>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_MspInit+0x60>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d114      	bne.n	80013bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201c      	movs	r0, #28
 80013b0:	f000 fb65 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b4:	201c      	movs	r0, #28
 80013b6:	f000 fb7e 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ba:	e010      	b.n	80013de <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x6c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10b      	bne.n	80013de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_TIM_Base_MspInit+0x68>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40000400 	.word	0x40000400

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_TIM_MspPostInit+0x58>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d117      	bne.n	8001440 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_TIM_MspPostInit+0x5c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_TIM_MspPostInit+0x60>)
 800143c:	f000 fb56 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40000400 	.word	0x40000400
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_UART_MspInit+0x88>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d12f      	bne.n	80014d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 800147a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147e:	61d3      	str	r3, [r2, #28]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a4:	2304      	movs	r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <HAL_UART_MspInit+0x90>)
 80014b8:	f000 fb18 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014bc:	2308      	movs	r3, #8
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_UART_MspInit+0x90>)
 80014d0:	f000 fb0c 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f9b3 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM2_IRQHandler+0x10>)
 800153e:	f001 fa3f 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000009c 	.word	0x2000009c

0800154c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <setTimer1>:
void setTimer0(int duration) {
	timer0_cnt = duration;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	timer1_cnt = duration;
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <setTimer1+0x20>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <setTimer1+0x24>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000174 	.word	0x20000174
 800157c:	20000190 	.word	0x20000190

08001580 <setTimer2>:
void setTimer2(int duration) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	timer2_cnt = duration;
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <setTimer2+0x20>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <setTimer2+0x24>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000178 	.word	0x20000178
 80015a4:	20000194 	.word	0x20000194

080015a8 <setTimer3>:

void setTimer3(int duration) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	timer3_cnt = duration;
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <setTimer3+0x20>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <setTimer3+0x24>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000017c 	.word	0x2000017c
 80015cc:	20000198 	.word	0x20000198

080015d0 <clearTimer1>:
void clearTimer0() {
	timer0_cnt = 0;
	timer0_flag = 0;
}

void clearTimer1() {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	timer1_cnt = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <clearTimer1+0x18>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <clearTimer1+0x1c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000174 	.word	0x20000174
 80015ec:	20000190 	.word	0x20000190

080015f0 <clearTimer2>:

void clearTimer2() {
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	timer2_cnt = 0;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <clearTimer2+0x18>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <clearTimer2+0x1c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000178 	.word	0x20000178
 800160c:	20000194 	.word	0x20000194

08001610 <clearTimer3>:

void clearTimer3() {
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	timer3_cnt = 0;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <clearTimer3+0x18>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <clearTimer3+0x1c>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	2000017c 	.word	0x2000017c
 800162c:	20000198 	.word	0x20000198

08001630 <timerRun>:
void clearTimer6() {
	timer6_cnt = 0;
	timer6_flag = 0;
}

void timerRun() {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	if (timer0_cnt > 0) {
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <timerRun+0xec>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dd0b      	ble.n	8001654 <timerRun+0x24>
		timer0_cnt--;
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <timerRun+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	4a36      	ldr	r2, [pc, #216]	; (800171c <timerRun+0xec>)
 8001644:	6013      	str	r3, [r2, #0]
		if (timer0_cnt <= 0)
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <timerRun+0xec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	dc02      	bgt.n	8001654 <timerRun+0x24>
			timer0_flag = 1;
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <timerRun+0xf0>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
	}
	if (timer1_cnt > 0) {
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <timerRun+0xf4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd0b      	ble.n	8001674 <timerRun+0x44>
		timer1_cnt--;
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <timerRun+0xf4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a30      	ldr	r2, [pc, #192]	; (8001724 <timerRun+0xf4>)
 8001664:	6013      	str	r3, [r2, #0]
		if (timer1_cnt <= 0)
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <timerRun+0xf4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc02      	bgt.n	8001674 <timerRun+0x44>
			timer1_flag = 1;
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <timerRun+0xf8>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
	}
	if (timer2_cnt > 0) {
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <timerRun+0xfc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd0b      	ble.n	8001694 <timerRun+0x64>
		timer2_cnt--;
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <timerRun+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a2a      	ldr	r2, [pc, #168]	; (800172c <timerRun+0xfc>)
 8001684:	6013      	str	r3, [r2, #0]
		if (timer2_cnt <= 0)
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <timerRun+0xfc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dc02      	bgt.n	8001694 <timerRun+0x64>
			timer2_flag = 1;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <timerRun+0x100>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
	}
	if (timer3_cnt > 0) {
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <timerRun+0x104>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd0b      	ble.n	80016b4 <timerRun+0x84>
		timer3_cnt--;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <timerRun+0x104>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a24      	ldr	r2, [pc, #144]	; (8001734 <timerRun+0x104>)
 80016a4:	6013      	str	r3, [r2, #0]
		if (timer3_cnt <= 0)
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <timerRun+0x104>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	dc02      	bgt.n	80016b4 <timerRun+0x84>
			timer3_flag = 1;
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <timerRun+0x108>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
	}
	if (timer4_cnt > 0) {
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <timerRun+0x10c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dd0b      	ble.n	80016d4 <timerRun+0xa4>
		timer4_cnt--;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <timerRun+0x10c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <timerRun+0x10c>)
 80016c4:	6013      	str	r3, [r2, #0]
		if (timer4_cnt == 0)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <timerRun+0x10c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <timerRun+0xa4>
			timer4_flag = 1;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <timerRun+0x110>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
	}
	if (timer5_cnt > 0) {
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <timerRun+0x114>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dd0b      	ble.n	80016f4 <timerRun+0xc4>
		timer5_cnt--;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <timerRun+0x114>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <timerRun+0x114>)
 80016e4:	6013      	str	r3, [r2, #0]
		if (timer5_cnt == 0)
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <timerRun+0x114>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <timerRun+0xc4>
			timer5_flag = 1;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <timerRun+0x118>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
	}
	if (timer6_cnt > 0) {
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <timerRun+0x11c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd0b      	ble.n	8001714 <timerRun+0xe4>
		timer6_cnt--;
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <timerRun+0x11c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <timerRun+0x11c>)
 8001704:	6013      	str	r3, [r2, #0]
		if (timer6_cnt == 0)
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <timerRun+0x11c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <timerRun+0xe4>
			timer6_flag = 1;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <timerRun+0x120>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
	}
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000170 	.word	0x20000170
 8001720:	2000018c 	.word	0x2000018c
 8001724:	20000174 	.word	0x20000174
 8001728:	20000190 	.word	0x20000190
 800172c:	20000178 	.word	0x20000178
 8001730:	20000194 	.word	0x20000194
 8001734:	2000017c 	.word	0x2000017c
 8001738:	20000198 	.word	0x20000198
 800173c:	20000180 	.word	0x20000180
 8001740:	2000019c 	.word	0x2000019c
 8001744:	20000184 	.word	0x20000184
 8001748:	200001a0 	.word	0x200001a0
 800174c:	20000188 	.word	0x20000188
 8001750:	200001a4 	.word	0x200001a4

08001754 <isTimer1Expired>:
		return 1;
	} else
		return 0;
}

int isTimer1Expired() {
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	if (timer1_flag == 1) {
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <isTimer1Expired+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <isTimer1Expired+0x16>
		timer1_flag = 0;
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <isTimer1Expired+0x20>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
		return 1;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <isTimer1Expired+0x18>
	} else
		return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000190 	.word	0x20000190

08001778 <isTimer2Expired>:

int isTimer2Expired() {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <isTimer2Expired+0x20>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d104      	bne.n	800178e <isTimer2Expired+0x16>
		timer2_flag = 0;
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <isTimer2Expired+0x20>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		return 1;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <isTimer2Expired+0x18>
	} else
		return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000194 	.word	0x20000194

0800179c <isTimer3Expired>:

int isTimer3Expired() {
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	if (timer3_flag == 1) {
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <isTimer3Expired+0x20>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d104      	bne.n	80017b2 <isTimer3Expired+0x16>
		timer3_flag = 0;
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <isTimer3Expired+0x20>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <isTimer3Expired+0x18>
	} else
		return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000198 	.word	0x20000198

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e6:	f7ff feb1 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 ff87 	bl	80036fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fbc3 	bl	8000f78 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80017fc:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8001800:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001804:	200001ac 	.word	0x200001ac

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f923 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fd78 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f93b 	bl	8001ad2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f903 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000002c 	.word	0x2000002c
 8001890:	20000034 	.word	0x20000034
 8001894:	20000030 	.word	0x20000030

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000034 	.word	0x20000034
 80018b8:	200001a8 	.word	0x200001a8

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	200001a8 	.word	0x200001a8

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	; (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e32:	787b      	ldrb	r3, [r7, #1]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e272      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e74:	4b92      	ldr	r3, [pc, #584]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4b8f      	ldr	r3, [pc, #572]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x12c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d168      	bne.n	8001f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e24c      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x76>
 8001ebc:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a7f      	ldr	r2, [pc, #508]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e02e      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b78      	ldr	r3, [pc, #480]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a77      	ldr	r2, [pc, #476]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a71      	ldr	r2, [pc, #452]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001f10:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6a      	ldr	r2, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a67      	ldr	r2, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcc4 	bl	80018bc <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fcc0 	bl	80018bc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e200      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe4>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fcb0 	bl	80018bc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fcac 	bl	80018bc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1ec      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x10c>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c0      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4939      	ldr	r1, [pc, #228]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fc65 	bl	80018bc <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fc61 	bl	80018bc <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4927      	ldr	r1, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7ff fc44 	bl	80018bc <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fc40 	bl	80018bc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e180      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03a      	beq.n	80020d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d019      	beq.n	800209e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fc24 	bl	80018bc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fc20 	bl	80018bc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e160      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 fad8 	bl	800264c <RCC_Delay>
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fc0a 	bl	80018bc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7ff fc06 	bl	80018bc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e146      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420000 	.word	0x42420000
 80020c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e9      	bne.n	80020ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a6 	beq.w	8002232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a87      	ldr	r2, [pc, #540]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7e      	ldr	r2, [pc, #504]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7ff fbc7 	bl	80018bc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7ff fbc3 	bl	80018bc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e103      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x4c8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a6e      	ldr	r2, [pc, #440]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e02d      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x334>
 800216e:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a69      	ldr	r2, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x356>
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fb77 	bl	80018bc <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff fb73 	bl	80018bc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0b1      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <HAL_RCC_OscConfig+0x37e>
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fb61 	bl	80018bc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff fb5d 	bl	80018bc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e09b      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d061      	beq.n	800230c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d146      	bne.n	80022de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fb31 	bl	80018bc <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff fb2d 	bl	80018bc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e06d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4921      	ldr	r1, [pc, #132]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a19      	ldr	r1, [r3, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	430b      	orrs	r3, r1
 80022aa:	491b      	ldr	r1, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fb01 	bl	80018bc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff fafd 	bl	80018bc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e03d      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
 80022dc:	e035      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff faea 	bl	80018bc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fae6 	bl	80018bc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e026      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x498>
 800230a:	e01e      	b.n	800234a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e019      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x500>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4965      	ldr	r1, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff fa38 	bl	80018bc <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7ff fa34 	bl	80018bc <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1cc>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f996 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	0800377c 	.word	0x0800377c
 8002524:	2000002c 	.word	0x2000002c
 8002528:	20000030 	.word	0x20000030

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b490      	push	{r4, r7}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002534:	1d3c      	adds	r4, r7, #4
 8002536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800253c:	f240 2301 	movw	r3, #513	; 0x201
 8002540:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x46>
 800256a:	e02b      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800256e:	623b      	str	r3, [r7, #32]
      break;
 8002570:	e02b      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3328      	adds	r3, #40	; 0x28
 800257c:	443b      	add	r3, r7
 800257e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002582:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0c5b      	lsrs	r3, r3, #17
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	3328      	adds	r3, #40	; 0x28
 800259a:	443b      	add	r3, r7
 800259c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025a6:	fb03 f202 	mul.w	r2, r3, r2
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e004      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	623b      	str	r3, [r7, #32]
      break;
 80025c2:	e002      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025c6:	623b      	str	r3, [r7, #32]
      break;
 80025c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc90      	pop	{r4, r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	0800376c 	.word	0x0800376c
 80025dc:	40021000 	.word	0x40021000
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	003d0900 	.word	0x003d0900

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	2000002c 	.word	0x2000002c

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	0800378c 	.word	0x0800378c

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff ffde 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0adb      	lsrs	r3, r3, #11
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	0800378c 	.word	0x0800378c

0800264c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCC_Delay+0x34>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <RCC_Delay+0x38>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002668:	bf00      	nop
  }
  while (Delay --);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <RCC_Delay+0x1c>
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	2000002c 	.word	0x2000002c
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e041      	b.n	800271e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fe66 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 fc28 	bl	8002f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d001      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e03a      	b.n	80027b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_TIM_Base_Start_IT+0x98>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00e      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x58>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d009      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x58>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x58>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d010      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	e007      	b.n	80027b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40000800 	.word	0x40000800

080027cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e041      	b.n	8002862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f839 	bl	800286a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 fb86 	bl	8002f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x24>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e022      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d109      	bne.n	80028ba <HAL_TIM_PWM_Start+0x3e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e015      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start+0x58>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e008      	b.n	80028e6 <HAL_TIM_PWM_Start+0x6a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e05e      	b.n	80029ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_PWM_Start+0x82>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	e013      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <HAL_TIM_PWM_Start+0x92>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	e00b      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start+0xa2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800291c:	e003      	b.n	8002926 <HAL_TIM_PWM_Start+0xaa>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fd74 	bl	800341c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_TIM_PWM_Start+0x138>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d107      	bne.n	800294e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_TIM_PWM_Start+0x138>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d009      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIM_PWM_Start+0x13c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIM_PWM_Start+0xfa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_TIM_PWM_Start+0x140>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d111      	bne.n	800299a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d010      	beq.n	80029aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	e007      	b.n	80029aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800

080029c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0202 	mvn.w	r2, #2
 80029ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa6f 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa62 	bl	8002ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa71 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0204 	mvn.w	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa45 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa38 	bl	8002ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fa47 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0208 	mvn.w	r2, #8
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa1b 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fa0e 	bl	8002ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa1d 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0210 	mvn.w	r2, #16
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2208      	movs	r2, #8
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9f1 	bl	8002ee6 <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f9e4 	bl	8002ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9f3 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0201 	mvn.w	r2, #1
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fbda 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fce1 	bl	8003532 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9b7 	bl	8002f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0220 	mvn.w	r2, #32
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fcac 	bl	8003520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0ac      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	f200 809f 	bhi.w	8002d38 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c35 	.word	0x08002c35
 8002c04:	08002d39 	.word	0x08002d39
 8002c08:	08002d39 	.word	0x08002d39
 8002c0c:	08002d39 	.word	0x08002d39
 8002c10:	08002c75 	.word	0x08002c75
 8002c14:	08002d39 	.word	0x08002d39
 8002c18:	08002d39 	.word	0x08002d39
 8002c1c:	08002d39 	.word	0x08002d39
 8002c20:	08002cb7 	.word	0x08002cb7
 8002c24:	08002d39 	.word	0x08002d39
 8002c28:	08002d39 	.word	0x08002d39
 8002c2c:	08002d39 	.word	0x08002d39
 8002c30:	08002cf7 	.word	0x08002cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f9d0 	bl	8002fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0204 	bic.w	r2, r2, #4
 8002c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6999      	ldr	r1, [r3, #24]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	619a      	str	r2, [r3, #24]
      break;
 8002c72:	e062      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fa16 	bl	80030ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	021a      	lsls	r2, r3, #8
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	619a      	str	r2, [r3, #24]
      break;
 8002cb4:	e041      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fa5f 	bl	8003180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0208 	orr.w	r2, r2, #8
 8002cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0204 	bic.w	r2, r2, #4
 8002ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69d9      	ldr	r1, [r3, #28]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
      break;
 8002cf4:	e021      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 faa9 	bl	8003254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69d9      	ldr	r1, [r3, #28]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	61da      	str	r2, [r3, #28]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIM_ConfigClockSource+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0b3      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x180>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9c:	d03e      	beq.n	8002e1c <HAL_TIM_ConfigClockSource+0xd0>
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da2:	f200 8087 	bhi.w	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	f000 8085 	beq.w	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d87f      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002db4:	2b70      	cmp	r3, #112	; 0x70
 8002db6:	d01a      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0xa2>
 8002db8:	2b70      	cmp	r3, #112	; 0x70
 8002dba:	d87b      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002dbc:	2b60      	cmp	r3, #96	; 0x60
 8002dbe:	d050      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x116>
 8002dc0:	2b60      	cmp	r3, #96	; 0x60
 8002dc2:	d877      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002dc4:	2b50      	cmp	r3, #80	; 0x50
 8002dc6:	d03c      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xf6>
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d873      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d058      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x136>
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d86f      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d064      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x156>
 8002dd8:	2b30      	cmp	r3, #48	; 0x30
 8002dda:	d86b      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d060      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x156>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d867      	bhi.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d05c      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x156>
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d05a      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dec:	e062      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f000 faee 	bl	80033de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	609a      	str	r2, [r3, #8]
      break;
 8002e1a:	e04e      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f000 fad7 	bl	80033de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3e:	609a      	str	r2, [r3, #8]
      break;
 8002e40:	e03b      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fa4e 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2150      	movs	r1, #80	; 0x50
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 faa5 	bl	80033aa <TIM_ITRx_SetConfig>
      break;
 8002e60:	e02b      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 fa6c 	bl	800334c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2160      	movs	r1, #96	; 0x60
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fa95 	bl	80033aa <TIM_ITRx_SetConfig>
      break;
 8002e80:	e01b      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 fa2e 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa85 	bl	80033aa <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e00b      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f000 fa7c 	bl	80033aa <TIM_ITRx_SetConfig>
        break;
 8002eb2:	e002      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <TIM_Base_SetConfig+0xb8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <TIM_Base_SetConfig+0x30>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d007      	beq.n	8002f4c <TIM_Base_SetConfig+0x30>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <TIM_Base_SetConfig+0xbc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0x30>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <TIM_Base_SetConfig+0xc0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <TIM_Base_SetConfig+0xb8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_Base_SetConfig+0x62>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d007      	beq.n	8002f7e <TIM_Base_SetConfig+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <TIM_Base_SetConfig+0xbc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <TIM_Base_SetConfig+0xc0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <TIM_Base_SetConfig+0xb8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800

08002fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0201 	bic.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 0302 	bic.w	r3, r3, #2
 8003028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <TIM_OC1_SetConfig+0xc8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0308 	bic.w	r3, r3, #8
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <TIM_OC1_SetConfig+0xc8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d111      	bne.n	8003082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800306c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	621a      	str	r2, [r3, #32]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00

080030ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <TIM_OC2_SetConfig+0xd0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10d      	bne.n	8003128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <TIM_OC2_SetConfig+0xd0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d113      	bne.n	8003158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00

08003180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <TIM_OC3_SetConfig+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10d      	bne.n	80031fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <TIM_OC3_SetConfig+0xd0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00

08003254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <TIM_OC4_SetConfig+0x98>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d109      	bne.n	80032c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00

080032f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 030a 	bic.w	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 0210 	bic.w	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	031b      	lsls	r3, r3, #12
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f043 0307 	orr.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	021a      	lsls	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	431a      	orrs	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4313      	orrs	r3, r2
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2201      	movs	r2, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e046      	b.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c8:	d009      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10c      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800

08003520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03f      	b.n	80035d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd ff72 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f829 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800361a:	f023 030c 	bic.w	r3, r3, #12
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	430b      	orrs	r3, r1
 8003626:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2c      	ldr	r2, [pc, #176]	; (80036f4 <UART_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe ffec 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	e002      	b.n	8003656 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7fe ffd4 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8003654:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <UART_SetConfig+0x118>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	0119      	lsls	r1, r3, #4
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009a      	lsls	r2, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	fbb2 f2f3 	udiv	r2, r2, r3
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <UART_SetConfig+0x118>)
 800368e:	fba3 0302 	umull	r0, r3, r3, r2
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2064      	movs	r0, #100	; 0x64
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	3332      	adds	r3, #50	; 0x32
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <UART_SetConfig+0x118>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ac:	4419      	add	r1, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <UART_SetConfig+0x118>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 020f 	and.w	r2, r3, #15
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	440a      	add	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40013800 	.word	0x40013800
 80036f8:	51eb851f 	.word	0x51eb851f

080036fc <__libc_init_array>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	2600      	movs	r6, #0
 8003700:	4d0c      	ldr	r5, [pc, #48]	; (8003734 <__libc_init_array+0x38>)
 8003702:	4c0d      	ldr	r4, [pc, #52]	; (8003738 <__libc_init_array+0x3c>)
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	42a6      	cmp	r6, r4
 800370a:	d109      	bne.n	8003720 <__libc_init_array+0x24>
 800370c:	f000 f822 	bl	8003754 <_init>
 8003710:	2600      	movs	r6, #0
 8003712:	4d0a      	ldr	r5, [pc, #40]	; (800373c <__libc_init_array+0x40>)
 8003714:	4c0a      	ldr	r4, [pc, #40]	; (8003740 <__libc_init_array+0x44>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	42a6      	cmp	r6, r4
 800371c:	d105      	bne.n	800372a <__libc_init_array+0x2e>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	f855 3b04 	ldr.w	r3, [r5], #4
 8003724:	4798      	blx	r3
 8003726:	3601      	adds	r6, #1
 8003728:	e7ee      	b.n	8003708 <__libc_init_array+0xc>
 800372a:	f855 3b04 	ldr.w	r3, [r5], #4
 800372e:	4798      	blx	r3
 8003730:	3601      	adds	r6, #1
 8003732:	e7f2      	b.n	800371a <__libc_init_array+0x1e>
 8003734:	08003794 	.word	0x08003794
 8003738:	08003794 	.word	0x08003794
 800373c:	08003794 	.word	0x08003794
 8003740:	08003798 	.word	0x08003798

08003744 <memset>:
 8003744:	4603      	mov	r3, r0
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
